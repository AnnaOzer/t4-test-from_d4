теги - условные сокращения в фреймворке для сложных операций в представлении
чтобы не путать с html тегами, начинаются с t4:
по умолчанию <t4:editor></t4:editor> выведет просто textarea

подключим расширение ckeditor (потребовалось прописать 'location' => 'local',)
а оно зависит от jquery которое тоже подключим
фреймворк будет заменять тег t4:editor на богатый визуальный редактор
(применим стили, нажмем слева источник, увидим html)

t4/framework/Mvc/View.php есть метод parseTags
когда рендерер - шаблонный движок - отдал нам готовый шаблон,
 вызывается эта функция, которая проходится по тегам с t4:
 вызывает класс, соответствующий этому тегу
 и вызывает метод рендер этого класса

 в результате каждый тег заменяется на объект
 например editor на ckeditor

 в Mvc/Tags собраны теги, которые уже реализованы (их 3 Block Editor {Section плохо реализован})


--------
тег блок - основной
он отличает t4 от остальных фреймворков

классический паттерн mvc предполагает, что у вас идет линейный процесс
    запрос пользователя заходит в контроллер
    контроллер общается с моделями
    контроллер передает данные во вью
    вью отдает результат своей работы клиенту

есть ситуации, когда классический mvc перестает нас устраивать
    откройте главную страницу любого магазина
        вы там видите блоки, относительно незхависимые кусочки отображения
            блок со списком категорий товаров
            блок где выводится общее меню навигации
            блок 10 самых круто подешевевших товаров на этой неделе
            блок а вы смотрели эти товары не хотите ли вернуться
            блок 5 последних новостей магазина
            блок содержимое вашей корзины
        а контроллер один,
        экшен под названием главная страница один
        он должен из десятка моделей собрать данные
            и это всё передать в шаблон
        но это не правильно:

        1)  пусть в html коде убрали некий блок
            а в контроллере забыли его убрать
            и контроллер вхолостую лезет в модель и выполняет сложный запрос, готовит данные, отдает во вью, и всё зря
                вью их не использует
        2) скатываемся к идее антипаттерна - "толстого контроллера"
            толстые тупые уродливые контроллеры

        контроллер должен быть тонким, сухим и поджарым
            его задача - как можно быстрее передать нужные данные представлению
        страницу надо набрать из независимых блоков
        допустим, хоим вывести на главной странице 10 последних товаров - пример

<t4:block path="//Items/Last" num="10">
с одной стороны, это тег
с другой стороны, видим роут, это вызов контроллера
t4 позволяет с помощью специального синтаксиса из шаблона вызвать другой контроллер

шаблон блока не надо наследовать от других шаблонов

один и тот же экшен может быть как для вывода шаблона, так и для вывода блока. просто шаблоны разные.

можем собрать страницу из блоков, передавая им роут и параметры

это не нарушение концепции mvc а продолжение, это hmvc?
когда разбиваем программу на действительно маленькие части
и собираем страницу из них



